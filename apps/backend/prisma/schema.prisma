datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  PM
  TECH
  RESIDENT
  ACCOUNTANT
  MASTER
}

enum TicketSeverity {
  LOW
  MEDIUM
  HIGH
}

enum TicketStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String
  tenantId      Int
  role          Role
  refreshTokenHash String?
  createdAt     DateTime @default(now())
  resident      Resident?
  assignedTickets Ticket[] @relation("TicketAssignee")
  supplier      Supplier?
  impersonationEvents ImpersonationEvent[] @relation("MasterEvents")
}

model Building {
  id        Int     @id @default(autoincrement())
  name      String
  address   String
  tenantId  Int
  units     Unit[]
}

model Unit {
  id         Int        @id @default(autoincrement())
  number     String
  buildingId Int
  building   Building   @relation(fields: [buildingId], references: [id])
  residents  Resident[]
  tickets    Ticket[]
}

model Resident {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id])
  units   Unit[]
  invoices Invoice[]
}

model Ticket {
  id           Int            @id @default(autoincrement())
  unitId       Int
  unit         Unit           @relation(fields: [unitId], references: [id])
  severity     TicketSeverity
  status       TicketStatus   @default(OPEN)
  slaDue       DateTime?
  photos       String[]
  assignedToId Int?
  assignedTo   User?          @relation("TicketAssignee", fields: [assignedToId], references: [id])
  createdAt    DateTime       @default(now())
  workOrders   WorkOrder[]
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String
  skills    String[]
  rating    Float?
  documents String[]
  userId    Int?      @unique
  user      User?     @relation(fields: [userId], references: [id])
  workOrders WorkOrder[]
}

model WorkOrder {
  id           Int      @id @default(autoincrement())
  ticketId     Int
  supplierId   Int
  costEstimate Float?
  createdAt    DateTime @default(now())
  ticket       Ticket   @relation(fields: [ticketId], references: [id])
  supplier     Supplier @relation(fields: [supplierId], references: [id])
}

enum InvoiceStatus {
  UNPAID
  PAID
}

model Invoice {
  id         Int           @id @default(autoincrement())
  residentId Int
  resident   Resident      @relation(fields: [residentId], references: [id])
  items      Json
  amount     Float
  status     InvoiceStatus @default(UNPAID)
  createdAt  DateTime      @default(now())
}

model ImpersonationEvent {
  id           Int      @id @default(autoincrement())
  masterUserId Int
  masterUser   User     @relation("MasterEvents", fields: [masterUserId], references: [id])
  action       String
  targetRole   Role?
  tenantId     Int?
  reason       String?
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())
}
